%%
%   Mark Tentindo
%   ECE 6565
%   2014-10-03
%   Final Project
%%

clc
close all
clear all
%%%%% CONFIGURATION %%%%%

malwareSampleDirectory = './samples/malware';
cleanSampleDirectory = './samples/clean';
unknownSampleDirectory = './samples/unknown';
reportFile = 'report.txt';
regexFile = './library/regex_strings.txt';

method = 'KMEANS'; % can equal THRESH or KMEANS

%%% END CONFIGURATION %%%

%% Load Library Files
    regexStrings = load_libs(regexFile);

%% Parse Input Files

    % Parse reference files
    [malAppNames, malAppFingerprints] = parse_files(malwareSampleDirectory, regexStrings{:});
    [cleanAppNames, cleanAppFingerprints] = parse_files(cleanSampleDirectory, regexStrings{:});
    
    % Parse test files
    [unknownAppNames, unknownAppFingerprints] = parse_files(unknownSampleDirectory, regexStrings{:});
    
%% Perform Scoring
    
    combinedFingerprints = sum(malAppFingerprints) + sum(cleanAppFingerprints);
    percentageInMalware = sum(malAppFingerprints) ./ combinedFingerprints;
    
    percentageInMalware = round(percentageInMalware.*100);
    
    % heavily weight 100%'s
    temp = zeros(1, length(percentageInMalware));
    temp(percentageInMalware==100) = 1;
    percentageInMalware = percentageInMalware + temp.*1e3;
    
    % generate scores
    scores = sum(bsxfun(@times, unknownAppFingerprints, percentageInMalware)');
    
    % thresholf classification
    if (strcmp(method, 'THRESH'))
        % calculate a scoring threshold for classification
        malScores = sum(bsxfun(@times, malAppFingerprints, percentageInMalware)');
        cleanScores = sum(bsxfun(@times, cleanAppFingerprints, percentageInMalware)');

        threshold = mean([min(malScores) max(cleanScores)]);

        scores(scores<threshold) = 0;

        results = ones(1, length(scores));
        results(find(scores)) = 2;
        
        % plot results
        figure
        appNumbering = 1:length(scores);
        plot(appNumbering, scores, 'b-o', appNumbering, threshold.*ones(1, length(scores)), 'r', appNumbering, mean(scores).*ones(1, length(scores)), 'g')
        title('Score'), xlabel('App Number'), ylabel('Score')
        legend('App Score', 'Threshold', 'Mean Score')
        
        words = {'no', 'yes'};
    
    elseif (strcmp(method, 'KMEANS'))
        % classify with kmeans
        scores = scores';
        [results, C] = kmeans(scores ,2);
        
        % plot the results
        figure, hold on
        plot(zeros(length(scores(results==1, 1)), 1), scores(results==1, 1),'r.','MarkerSize',12)
        plot(zeros(length(scores(results==2, 1)), 1), scores(results==2, 1),'b.','MarkerSize',12)
        plot(zeros(length(C), 1), C(:, 1), 'kx', 'MarkerSize', 15, 'LineWidth', 3)
        title ('Clustering of Applications')
        if(C(1) > C(2))
            legend('Malware','Clean','Centroids')
            words = {'yes', 'no'};
        else
            legend('Clean','Malware','Centroids')
            words = {'no', 'yes'};
        end
        
        hold off
    
    else
       error('Invalid classification method. Choose <KMEANS> or <THRESH>...') 
    end
    
%% Export Results

    file = fopen(reportFile, 'w');
    if (file == -1)
        error('Unable to open file <%s>', reportFile)
    end

    % write results to file
    fprintf(file, '#\tFilename\t\t\t\t\t\tMalware?\n---\t--------------------\t\t\t--------------------\n\n');
    
    for line = 1:length(results)
        fprintf(file, '%d\t%s\t\t\t\t%s\n', line, unknownAppNames(line, :), words{results(line)});
    end

    % close file
    if(fclose(file) == -1)
        error('Unable to close file <%s>', reportFile)
    end